generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  password      String?
  emailVerified DateTime?
  isBetaTester  Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  isAllowlisted Boolean   @default(false)  // User is approved to use the platform
  isWaitlisted  Boolean   @default(true)   // User is on waitlist
  joinedWaitlistAt DateTime @default(now())
  approvedAt    DateTime?                   // When they were allowlisted
  dailyImageLimit Int     @default(5)      // Daily image generation limit
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  supportTickets SupportTicket[]
  passwordResetTokens PasswordResetToken[]
  profile       Profile?
  feedback      Feedback[]
  apiUsage      ApiUsage[]
  abTestParticipants ABTestParticipant[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  style       String   // classic, van_gogh, monet
  basePrice   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orderItems OrderItem[]
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  status         OrderStatus @default(PENDING)
  totalAmount    Float
  
  // Original image
  originalImage  String
  
  // AI Generated preview
  aiPreviewImage String?
  selectedStyle  String      // classic, van_gogh, monet
  
  // Shipping information
  shippingName   String?
  shippingEmail  String?
  shippingPhone  String?
  shippingAddress String?
  shippingCity   String?
  shippingState  String?
  shippingZipCode String?
  shippingCountry String?
  
  // Payment information
  paymentIntentId String?
  paymentStatus  PaymentStatus @default(PENDING)
  
  // Artist assignment
  artistNotes    String?
  estimatedDelivery DateTime?
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
  orderHistory   OrderHistory[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  AI_GENERATED
  ARTIST_ASSIGNED
  PAINTING
  QUALITY_CHECK
  SHIPPING
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model OrderHistory {
  id        String   @id @default(cuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdAt DateTime @default(now())
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id        String   @id @default(cuid())
  userId    String
  subject   String
  message   String
  status    TicketStatus @default(OPEN)
  priority  TicketPriority @default(MEDIUM)
  category  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   TicketReply[]
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model TicketReply {
  id        String   @id @default(cuid())
  ticketId  String
  message   String
  isStaff   Boolean  @default(false)
  createdAt DateTime @default(now())
  
  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model Feedback {
  id              String   @id @default(cuid())
  userId          String
  page            String   // The page where feedback was submitted
  type            String   // bug, feature, improvement, other
  message         String
  expectedBehavior String? // What the user expected to happen
  actualBehavior  String?  // What actually happened
  rating          Int?     // Optional 1-5 rating
  status          FeedbackStatus @default(NEW)
  priority        FeedbackPriority @default(MEDIUM)
  adminNotes      String?  // Admin comments and notes
  sprintId        String?  // If assigned to a sprint
  resolution      String?  // How the issue was resolved
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sprint Sprint? @relation(fields: [sprintId], references: [id])
}

model Sprint {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  status      SprintStatus @default(PLANNING)
  goals       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  feedbacks   Feedback[]
}

enum FeedbackStatus {
  NEW
  REVIEWED
  IN_PROGRESS
  RESOLVED
  ARCHIVED
  SCHEDULED  // Added for sprint planning
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SprintStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

model ApiUsage {
  id          String   @id @default(cuid())
  userId      String?
  apiType     String   // "gemini", "supabase", etc.
  endpoint    String   // Specific endpoint or model used
  model       String?  // For Gemini: model name
  operation   String   // "image_generation", "text_generation", etc.
  inputTokens Int?     // For text models
  outputTokens Int?    // For text models
  imageCount  Int?     // For image operations
  cost        Float?   // Estimated cost if available
  success     Boolean
  error       String?
  metadata    Json?    // Additional data
  duration    Int?     // Processing time in ms
  createdAt   DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([apiType, createdAt])
}

model IpUsage {
  id       String   @id @default(cuid())
  ip       String
  date     DateTime // Date for daily tracking (set to midnight UTC)
  count    Int      @default(0) // Number of generations for this IP on this date
  lastUsed DateTime @default(now()) // Last time this IP was used
  
  @@unique([ip, date], name: "ip_date")
  @@index([ip])
  @@index([date])
}

// A/B Testing Models
model ABTestParticipant {
  id          String   @id @default(cuid())
  userId      String?  // Optional - for logged in users
  sessionId   String?  // For anonymous users
  testName    String   // Name of the A/B test
  variant     String   // Which variant they're seeing
  assignedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  events      ABTestEvent[]
  
  @@unique([userId, testName], name: "user_test")
  @@unique([sessionId, testName], name: "session_test")
  @@index([testName, variant])
  @@index([assignedAt])
}

model ABTestEvent {
  id             String   @id @default(cuid())
  participantId  String
  eventType      String   // page_view, cta_click, conversion, etc.
  eventData      Json?    // Additional event metadata
  timestamp      DateTime @default(now())
  
  participant    ABTestParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  
  @@index([participantId, eventType])
  @@index([timestamp])
}

model ABTestResult {
  id                String   @id @default(cuid())
  testName          String
  variant           String
  totalParticipants Int      @default(0)
  totalConversions  Int      @default(0)
  conversionRate    Float    @default(0)
  confidenceLevel   Float?   // Statistical significance
  startDate         DateTime @default(now())
  endDate           DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([testName, variant], name: "test_variant")
  @@index([testName])
  @@index([isActive])
}